export default [
  {
    "statements": [
      "CREATE TABLE \"random1\" (\n  \"id\" INTEGER NOT NULL,\n  \"task\" TEXT NOT NULL,\n  \"checked\" INTEGER NOT NULL,\n  CONSTRAINT \"random1_pkey\" PRIMARY KEY (\"id\")\n) WITHOUT ROWID;\n",
      "CREATE TABLE \"testdocument\" (\n  \"doc_id\" INTEGER NOT NULL,\n  \"experiment_name\" TEXT NOT NULL,\n  \"type\" TEXT,\n  \"createdtime\" TEXT NOT NULL,\n  \"x_position\" INTEGER,\n  \"y_position\" INTEGER,\n  \"width\" INTEGER,\n  \"height\" INTEGER,\n  CONSTRAINT \"testdocument_pkey\" PRIMARY KEY (\"doc_id\")\n) WITHOUT ROWID;\n",
      "CREATE TABLE \"images\" (\n  \"image_id\" INTEGER NOT NULL,\n  \"link\" TEXT,\n  \"descr\" TEXT,\n  CONSTRAINT \"images_image_id_fkey\" FOREIGN KEY (\"image_id\") REFERENCES \"testdocument\" (\"doc_id\") ON DELETE CASCADE,\n  CONSTRAINT \"images_pkey\" PRIMARY KEY (\"image_id\")\n) WITHOUT ROWID;\n",
      "CREATE TABLE \"todolist\" (\n  \"item_id\" INTEGER NOT NULL,\n  \"doc_id\" INTEGER NOT NULL,\n  \"checked\" INTEGER,\n  \"task\" TEXT,\n  CONSTRAINT \"todolist_pkey\" PRIMARY KEY (\"item_id\")\n) WITHOUT ROWID;\n",
      "CREATE TABLE \"todolist1\" (\n  \"item_id\" INTEGER NOT NULL,\n  \"doc_id\" INTEGER NOT NULL,\n  \"checked\" INTEGER,\n  \"task\" TEXT,\n  CONSTRAINT \"todolist1_pkey\" PRIMARY KEY (\"item_id\")\n) WITHOUT ROWID;\n",
      "INSERT OR IGNORE INTO _electric_trigger_settings(tablename,flag) VALUES ('main.random1', 1);",
      "DROP TRIGGER IF EXISTS update_ensure_main_random1_primarykey;",
      "CREATE TRIGGER update_ensure_main_random1_primarykey\n  BEFORE UPDATE ON \"main\".\"random1\"\nBEGIN\n  SELECT\n    CASE\n      WHEN old.\"id\" != new.\"id\" THEN\n      \t\tRAISE (ABORT, 'cannot change the value of column id as it belongs to the primary key')\n    END;\nEND;",
      "DROP TRIGGER IF EXISTS insert_main_random1_into_oplog;",
      "CREATE TRIGGER insert_main_random1_into_oplog\n   AFTER INSERT ON \"main\".\"random1\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.random1')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'random1', 'INSERT', json_object('id', new.\"id\"), json_object('checked', new.\"checked\", 'id', new.\"id\", 'task', new.\"task\"), NULL, NULL);\nEND;",
      "DROP TRIGGER IF EXISTS update_main_random1_into_oplog;",
      "CREATE TRIGGER update_main_random1_into_oplog\n   AFTER UPDATE ON \"main\".\"random1\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.random1')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'random1', 'UPDATE', json_object('id', new.\"id\"), json_object('checked', new.\"checked\", 'id', new.\"id\", 'task', new.\"task\"), json_object('checked', old.\"checked\", 'id', old.\"id\", 'task', old.\"task\"), NULL);\nEND;",
      "DROP TRIGGER IF EXISTS delete_main_random1_into_oplog;",
      "CREATE TRIGGER delete_main_random1_into_oplog\n   AFTER DELETE ON \"main\".\"random1\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.random1')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'random1', 'DELETE', json_object('id', old.\"id\"), NULL, json_object('checked', old.\"checked\", 'id', old.\"id\", 'task', old.\"task\"), NULL);\nEND;",
      "INSERT OR IGNORE INTO _electric_trigger_settings(tablename,flag) VALUES ('main.testdocument', 1);",
      "DROP TRIGGER IF EXISTS update_ensure_main_testdocument_primarykey;",
      "CREATE TRIGGER update_ensure_main_testdocument_primarykey\n  BEFORE UPDATE ON \"main\".\"testdocument\"\nBEGIN\n  SELECT\n    CASE\n      WHEN old.\"doc_id\" != new.\"doc_id\" THEN\n      \t\tRAISE (ABORT, 'cannot change the value of column doc_id as it belongs to the primary key')\n    END;\nEND;",
      "DROP TRIGGER IF EXISTS insert_main_testdocument_into_oplog;",
      "CREATE TRIGGER insert_main_testdocument_into_oplog\n   AFTER INSERT ON \"main\".\"testdocument\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.testdocument')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'testdocument', 'INSERT', json_object('doc_id', new.\"doc_id\"), json_object('createdtime', new.\"createdtime\", 'doc_id', new.\"doc_id\", 'experiment_name', new.\"experiment_name\", 'height', new.\"height\", 'type', new.\"type\", 'width', new.\"width\", 'x_position', new.\"x_position\", 'y_position', new.\"y_position\"), NULL, NULL);\nEND;",
      "DROP TRIGGER IF EXISTS update_main_testdocument_into_oplog;",
      "CREATE TRIGGER update_main_testdocument_into_oplog\n   AFTER UPDATE ON \"main\".\"testdocument\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.testdocument')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'testdocument', 'UPDATE', json_object('doc_id', new.\"doc_id\"), json_object('createdtime', new.\"createdtime\", 'doc_id', new.\"doc_id\", 'experiment_name', new.\"experiment_name\", 'height', new.\"height\", 'type', new.\"type\", 'width', new.\"width\", 'x_position', new.\"x_position\", 'y_position', new.\"y_position\"), json_object('createdtime', old.\"createdtime\", 'doc_id', old.\"doc_id\", 'experiment_name', old.\"experiment_name\", 'height', old.\"height\", 'type', old.\"type\", 'width', old.\"width\", 'x_position', old.\"x_position\", 'y_position', old.\"y_position\"), NULL);\nEND;",
      "DROP TRIGGER IF EXISTS delete_main_testdocument_into_oplog;",
      "CREATE TRIGGER delete_main_testdocument_into_oplog\n   AFTER DELETE ON \"main\".\"testdocument\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.testdocument')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'testdocument', 'DELETE', json_object('doc_id', old.\"doc_id\"), NULL, json_object('createdtime', old.\"createdtime\", 'doc_id', old.\"doc_id\", 'experiment_name', old.\"experiment_name\", 'height', old.\"height\", 'type', old.\"type\", 'width', old.\"width\", 'x_position', old.\"x_position\", 'y_position', old.\"y_position\"), NULL);\nEND;",
      "INSERT OR IGNORE INTO _electric_trigger_settings(tablename,flag) VALUES ('main.images', 1);",
      "DROP TRIGGER IF EXISTS update_ensure_main_images_primarykey;",
      "CREATE TRIGGER update_ensure_main_images_primarykey\n  BEFORE UPDATE ON \"main\".\"images\"\nBEGIN\n  SELECT\n    CASE\n      WHEN old.\"image_id\" != new.\"image_id\" THEN\n      \t\tRAISE (ABORT, 'cannot change the value of column image_id as it belongs to the primary key')\n    END;\nEND;",
      "DROP TRIGGER IF EXISTS insert_main_images_into_oplog;",
      "CREATE TRIGGER insert_main_images_into_oplog\n   AFTER INSERT ON \"main\".\"images\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.images')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'images', 'INSERT', json_object('image_id', new.\"image_id\"), json_object('descr', new.\"descr\", 'image_id', new.\"image_id\", 'link', new.\"link\"), NULL, NULL);\nEND;",
      "DROP TRIGGER IF EXISTS update_main_images_into_oplog;",
      "CREATE TRIGGER update_main_images_into_oplog\n   AFTER UPDATE ON \"main\".\"images\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.images')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'images', 'UPDATE', json_object('image_id', new.\"image_id\"), json_object('descr', new.\"descr\", 'image_id', new.\"image_id\", 'link', new.\"link\"), json_object('descr', old.\"descr\", 'image_id', old.\"image_id\", 'link', old.\"link\"), NULL);\nEND;",
      "DROP TRIGGER IF EXISTS delete_main_images_into_oplog;",
      "CREATE TRIGGER delete_main_images_into_oplog\n   AFTER DELETE ON \"main\".\"images\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.images')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'images', 'DELETE', json_object('image_id', old.\"image_id\"), NULL, json_object('descr', old.\"descr\", 'image_id', old.\"image_id\", 'link', old.\"link\"), NULL);\nEND;",
      "DROP TRIGGER IF EXISTS compensation_insert_main_images_image_id_into_oplog;",
      "CREATE TRIGGER compensation_insert_main_images_image_id_into_oplog\n  AFTER INSERT ON \"main\".\"images\"\n  WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.testdocument') AND\n       1 == (SELECT value from _electric_meta WHERE key == 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'testdocument', 'COMPENSATION', json_object('doc_id', \"doc_id\"), json_object('doc_id', \"doc_id\"), NULL, NULL\n  FROM \"main\".\"testdocument\" WHERE \"doc_id\" = new.\"image_id\";\nEND;",
      "DROP TRIGGER IF EXISTS compensation_update_main_images_image_id_into_oplog;",
      "CREATE TRIGGER compensation_update_main_images_image_id_into_oplog\n   AFTER UPDATE ON \"main\".\"images\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.testdocument') AND\n        1 == (SELECT value from _electric_meta WHERE key == 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'testdocument', 'COMPENSATION', json_object('doc_id', \"doc_id\"), json_object('doc_id', \"doc_id\"), NULL, NULL\n  FROM \"main\".\"testdocument\" WHERE \"doc_id\" = new.\"image_id\";\nEND;",
      "INSERT OR IGNORE INTO _electric_trigger_settings(tablename,flag) VALUES ('main.todolist', 1);",
      "DROP TRIGGER IF EXISTS update_ensure_main_todolist_primarykey;",
      "CREATE TRIGGER update_ensure_main_todolist_primarykey\n  BEFORE UPDATE ON \"main\".\"todolist\"\nBEGIN\n  SELECT\n    CASE\n      WHEN old.\"item_id\" != new.\"item_id\" THEN\n      \t\tRAISE (ABORT, 'cannot change the value of column item_id as it belongs to the primary key')\n    END;\nEND;",
      "DROP TRIGGER IF EXISTS insert_main_todolist_into_oplog;",
      "CREATE TRIGGER insert_main_todolist_into_oplog\n   AFTER INSERT ON \"main\".\"todolist\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.todolist')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'todolist', 'INSERT', json_object('item_id', new.\"item_id\"), json_object('checked', new.\"checked\", 'doc_id', new.\"doc_id\", 'item_id', new.\"item_id\", 'task', new.\"task\"), NULL, NULL);\nEND;",
      "DROP TRIGGER IF EXISTS update_main_todolist_into_oplog;",
      "CREATE TRIGGER update_main_todolist_into_oplog\n   AFTER UPDATE ON \"main\".\"todolist\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.todolist')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'todolist', 'UPDATE', json_object('item_id', new.\"item_id\"), json_object('checked', new.\"checked\", 'doc_id', new.\"doc_id\", 'item_id', new.\"item_id\", 'task', new.\"task\"), json_object('checked', old.\"checked\", 'doc_id', old.\"doc_id\", 'item_id', old.\"item_id\", 'task', old.\"task\"), NULL);\nEND;",
      "DROP TRIGGER IF EXISTS delete_main_todolist_into_oplog;",
      "CREATE TRIGGER delete_main_todolist_into_oplog\n   AFTER DELETE ON \"main\".\"todolist\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.todolist')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'todolist', 'DELETE', json_object('item_id', old.\"item_id\"), NULL, json_object('checked', old.\"checked\", 'doc_id', old.\"doc_id\", 'item_id', old.\"item_id\", 'task', old.\"task\"), NULL);\nEND;",
      "INSERT OR IGNORE INTO _electric_trigger_settings(tablename,flag) VALUES ('main.todolist1', 1);",
      "DROP TRIGGER IF EXISTS update_ensure_main_todolist1_primarykey;",
      "CREATE TRIGGER update_ensure_main_todolist1_primarykey\n  BEFORE UPDATE ON \"main\".\"todolist1\"\nBEGIN\n  SELECT\n    CASE\n      WHEN old.\"item_id\" != new.\"item_id\" THEN\n      \t\tRAISE (ABORT, 'cannot change the value of column item_id as it belongs to the primary key')\n    END;\nEND;",
      "DROP TRIGGER IF EXISTS insert_main_todolist1_into_oplog;",
      "CREATE TRIGGER insert_main_todolist1_into_oplog\n   AFTER INSERT ON \"main\".\"todolist1\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.todolist1')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'todolist1', 'INSERT', json_object('item_id', new.\"item_id\"), json_object('checked', new.\"checked\", 'doc_id', new.\"doc_id\", 'item_id', new.\"item_id\", 'task', new.\"task\"), NULL, NULL);\nEND;",
      "DROP TRIGGER IF EXISTS update_main_todolist1_into_oplog;",
      "CREATE TRIGGER update_main_todolist1_into_oplog\n   AFTER UPDATE ON \"main\".\"todolist1\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.todolist1')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'todolist1', 'UPDATE', json_object('item_id', new.\"item_id\"), json_object('checked', new.\"checked\", 'doc_id', new.\"doc_id\", 'item_id', new.\"item_id\", 'task', new.\"task\"), json_object('checked', old.\"checked\", 'doc_id', old.\"doc_id\", 'item_id', old.\"item_id\", 'task', old.\"task\"), NULL);\nEND;",
      "DROP TRIGGER IF EXISTS delete_main_todolist1_into_oplog;",
      "CREATE TRIGGER delete_main_todolist1_into_oplog\n   AFTER DELETE ON \"main\".\"todolist1\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.todolist1')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'todolist1', 'DELETE', json_object('item_id', old.\"item_id\"), NULL, json_object('checked', old.\"checked\", 'doc_id', old.\"doc_id\", 'item_id', old.\"item_id\", 'task', old.\"task\"), NULL);\nEND;"
    ],
    "version": "1"
  }
]